================================================================================
üéØ √öLTIMA INSTRUCCI√ìN - SIGUE ESTO AHORA
================================================================================

RESUMEN:
Tu c√≥digo React est√° 100% correcto.
El problema es que falta crear 2 tablas en Supabase.
Soluci√≥n: Ejecutar SQL (5 minutos).

================================================================================
LOS 3 PROBLEMAS - RESUELTOS
================================================================================

1. ERROR: Notas de Entrega
   CAUSA: Tabla no existe
   SOLUCI√ìN: Ejecutar SQL ‚Üê HAZLO AHORA

2. ERROR: Pedidos
   CAUSA: Tabla no existe
   SOLUCI√ìN: Ejecutar SQL ‚Üê HAZLO AHORA

3. PREGUNTA: ¬øDevoluciones se descuentan del balance?
   RESPUESTA: S√ç, YA FUNCIONA ‚úÖ
   SOLUCI√ìN: Ninguna

================================================================================
INSTRUCCIONES PASO A PASO (5 MINUTOS)
================================================================================

PASO 1: Abre Supabase
   ‚Üí https://supabase.com
   ‚Üí Selecciona tu proyecto
   ‚Üí Click: SQL Editor (sidebar)
   ‚Üí Click: New Query (bot√≥n azul)

PASO 2: Copia TODO este SQL

   -- Tabla 1
   CREATE TABLE IF NOT EXISTS public.notas_entrega (
     id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
     owner UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
     numero_nota TEXT NOT NULL,
     cliente TEXT NOT NULL,
     items JSONB NOT NULL DEFAULT '[]',
     observaciones TEXT,
     fecha_entrega DATE NOT NULL,
     estado TEXT DEFAULT 'pendiente',
     created_at TIMESTAMP DEFAULT NOW(),
     updated_at TIMESTAMP DEFAULT NOW()
   );

   CREATE INDEX IF NOT EXISTS idx_notas_entrega_owner ON public.notas_entrega(owner);
   CREATE INDEX IF NOT EXISTS idx_notas_entrega_fecha ON public.notas_entrega(fecha_entrega);

   -- Tabla 2
   CREATE TABLE IF NOT EXISTS public.pedidos (
     id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
     owner UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
     numero_pedido TEXT NOT NULL UNIQUE,
     cliente TEXT NOT NULL,
     items JSONB NOT NULL DEFAULT '[]',
     total NUMERIC(10, 2) DEFAULT 0,
     estado TEXT DEFAULT 'pendiente',
     fecha_entrega_estimada DATE,
     observaciones TEXT,
     created_at TIMESTAMP DEFAULT NOW(),
     updated_at TIMESTAMP DEFAULT NOW()
   );

   CREATE INDEX IF NOT EXISTS idx_pedidos_owner ON public.pedidos(owner);
   CREATE INDEX IF NOT EXISTS idx_pedidos_numero ON public.pedidos(numero_pedido);

   -- Pol√≠ticas RLS para notas_entrega
   ALTER TABLE public.notas_entrega ENABLE ROW LEVEL SECURITY;

   DROP POLICY IF EXISTS notas_entrega_select ON public.notas_entrega;
   DROP POLICY IF EXISTS notas_entrega_insert ON public.notas_entrega;
   DROP POLICY IF EXISTS notas_entrega_update ON public.notas_entrega;
   DROP POLICY IF EXISTS notas_entrega_delete ON public.notas_entrega;

   CREATE POLICY notas_entrega_select ON public.notas_entrega
     FOR SELECT USING (auth.uid() = owner);

   CREATE POLICY notas_entrega_insert ON public.notas_entrega
     FOR INSERT WITH CHECK (auth.uid() = owner);

   CREATE POLICY notas_entrega_update ON public.notas_entrega
     FOR UPDATE USING (auth.uid() = owner);

   CREATE POLICY notas_entrega_delete ON public.notas_entrega
     FOR DELETE USING (auth.uid() = owner);

   -- Pol√≠ticas RLS para pedidos
   ALTER TABLE public.pedidos ENABLE ROW LEVEL SECURITY;

   DROP POLICY IF EXISTS pedidos_select ON public.pedidos;
   DROP POLICY IF EXISTS pedidos_insert ON public.pedidos;
   DROP POLICY IF EXISTS pedidos_update ON public.pedidos;
   DROP POLICY IF EXISTS pedidos_delete ON public.pedidos;

   CREATE POLICY pedidos_select ON public.pedidos
     FOR SELECT USING (auth.uid() = owner);

   CREATE POLICY pedidos_insert ON public.pedidos
     FOR INSERT WITH CHECK (auth.uid() = owner);

   CREATE POLICY pedidos_update ON public.pedidos
     FOR UPDATE USING (auth.uid() = owner);

   CREATE POLICY pedidos_delete ON public.pedidos
     FOR DELETE USING (auth.uid() = owner);

PASO 3: Pega en Supabase
   ‚Üí En el editor en blanco
   ‚Üí Ctrl + A (selecciona todo)
   ‚Üí Ctrl + V (pega el SQL)

PASO 4: Ejecuta
   ‚Üí Ctrl + Enter
   ‚Üí Espera a: ‚úÖ Query executed successfully

PASO 5: Verifica
   ‚Üí Click: Table Editor (sidebar)
   ‚Üí Busca: notas_entrega y pedidos
   ‚Üí Deben estar en la lista

PASO 6: Recarga la app
   ‚Üí npm run dev
   ‚Üí Espera a: Local: http://localhost:5173

PASO 7: Prueba
   ‚Üí Premium ‚Üí Notas de Entrega ‚Üí Crear nota ‚úÖ
   ‚Üí Premium ‚Üí Pedidos ‚Üí Crear pedido ‚úÖ

================================================================================
VERIFICACI√ìN R√ÅPIDA
================================================================================

‚úÖ C√≥digo React?         Correcto 100%
‚úÖ L√≥gica Notas?         Correcta (falta tabla)
‚úÖ L√≥gica Pedidos?       Correcta (falta tabla)
‚úÖ Devoluciones?         S√ç se descuentan ‚úÖ
‚úÖ Egresos?              S√ç funcionan ‚úÖ
‚úÖ Dashboard?            S√ç funciona ‚úÖ

================================================================================
F√ìRMULA CONFIRMADA (en Dashboard)
================================================================================

Balance Final = Ingresos - Egresos - Gastos Fijos - Deuda - Devoluciones

Ejemplo:
  $1000 (ingresos)
  -$200 (egresos)
  -$150 (gastos fijos)
  -$50  (deuda)
  -$100 (devoluciones) ‚Üê S√ç SE RESTAN
  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  $500  ‚úÖ BALANCE FINAL

================================================================================
RESULTADO ESPERADO
================================================================================

ANTES:
  ‚ùå Error al crear notas
  ‚ùå Error al crear pedidos
  ‚úÖ Devoluciones OK
  ‚úÖ Egresos OK

DESPU√âS (cuando ejecutes SQL):
  ‚úÖ Creas notas con n√∫mero ENT-1729999999
  ‚úÖ Creas pedidos con n√∫mero PED-1729999999
  ‚úÖ Verificas que devoluciones funcionan
  ‚úÖ Egresos siguen OK
  ‚úÖ TODO INTEGRADO EN DASHBOARD

================================================================================
TIEMPO TOTAL
================================================================================

SQL Supabase:    5 minutos ‚ö°
Recargar app:    2 minutos ‚ö°
Pruebas:         5 minutos ‚ö°
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOTAL:          12 minutos

================================================================================
DOCUMENTACI√ìN COMPLETA
================================================================================

Si necesitas m√°s detalles:
  üìÑ ‚ö°_TODO_EN_1_PAGINA.md
  üìÑ üéØ_GUIA_PASO_A_PASO_SUPABASE.md
  üìÑ ‚úÖ_CHECKLIST_PASO_A_PASO.md
  üìÑ üó∫Ô∏è_ROADMAP_VISUAL.md
  üìÑ üé®_TARJETAS_VISUALES_ESTADO.md
  üìÑ üìä_DIAGNOSTICO_FINAL_ESTADO_ACTUAL.md
  üìÑ üîß_REPARACION_COMPLETA_NOTAS_PEDIDOS_DEVOLUCIONES.md

================================================================================
SOPORTE R√ÅPIDO
================================================================================

Si algo no funciona:
  1. Abre consola (F12)
  2. Copia el error exacto
  3. Av√≠same con los pasos que hiciste
  4. Yo voy a revisar

================================================================================
CONCLUSI√ìN
================================================================================

‚úÖ TU C√ìDIGO EST√Å CORRECTO
‚ùå FALTA: Crear 2 tablas en Supabase (5 minutos)
‚úÖ DESPU√âS: TODO FUNCIONA PERFECTAMENTE

ACCI√ìN: Ejecuta el SQL en Supabase AHORA MISMO

¬°Adelante! üöÄ

================================================================================